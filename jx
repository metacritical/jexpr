#!/usr/bin/env node

J_enable_tests = false;

var J = require('./jexpr.js')
var fs = require('fs');
var verbose = false;

if (process.argv.length <= 2) {
    process.stderr.write('Usage: jx file1.js file2.js ...\n');
    process.stderr.write('  Will run all the code in the given files.\n\n');
    process.stderr.write('Usage: jx -C file1.js file2.js ... > out.js\n');
    process.stderr.write('  Will compile all the code in the given files\n')
    process.stderr.write('  and output the result to stdout.\n\n');
    process.stderr.write('Usage: jx file1.js -c file2.js file3.js ...\n');
    process.stderr.write('  Will run file1.js, file3.js, and others and \n');
    process.stderr.write('  then compile file2.js. Useful to load macros.\n');
    process.stderr.write('\nThe "-v" flag turns on verbose dumping of the parsed JSON.\n\n');
} else {
    var exprs_to_run = [], exprs_to_compile = [];
    var compile_next = false, compile_reset = true;
    process.argv.slice(2).forEach(function (f) {
        if (f === '-c') {
            compile_next = true;
        } else if (f === '-C') {
            compile_next = true;
            compile_reset = false;
        } else if (f === '-v') {
            verbose = true;
        } else {
            var source = fs.readFileSync(f, 'utf8');
            var p = J.parse(source);
            var exprs = compile_next ? exprs_to_compile : exprs_to_run;
            var expr;
            while ((expr = p()) !== undefined) {
                if (verbose) {
                    console.log(JSON.stringify(expr));
                }
                exprs.push(expr);
            }
            if (compile_reset) {
                compile_next = false;
            }
        }
    })

    var rt = J.runtime();
    if (exprs_to_run.length > 0) {
        J.eval({do: exprs_to_run}, rt);
    }
    if (exprs_to_compile.length > 0) {
        process.stdout.write(J.compile_to_js({do: exprs_to_compile}));
    }
}
